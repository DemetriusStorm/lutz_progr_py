"""
open('file').read()         # читает весь файл в строку
open('file').read(N)        # читает следующие N байтов в строку
open('file').readlines()    # читает весь файл в массив строк
open('file').readline()     # читает следующую строку, до символа '\n'
"""

import sys
from more import more

# result = more(
#    ' Функция help, с которой мы только что познакомились, также не обладает достаточной гибкостью \n\
#     при отображении информации. Хотя она и пытается в некоторых ситуациях обеспечить постраничный вывод,\n\
#     тем не менее на некоторых компьютерах – из тех, на которых мне приходилось работать, – она неточно \n\
#     выбирает размер страницы. Кроме того, она вообще не обеспечивает постраничный просмотр в графическом \n\
#     интерфейсе IDLE; вместо этого предлагается использовать полосу прокрутки, что весьма неудобно на \n\
#         больших мониторах. Когда мне требуется получить более полный контроль над тем, как функция help \
#     будет выводить текст, я обычно использую свой собственный вспомогательный сценарий, представленный\n\
#     в примере 2.1.\n\
#     Последние несколько строк в сценарии more.py из примера 2.1 знакомят нас с одним из первых важных понятий в программировании ин-\n\
# струментов командной строки. Они настраивают файл так, чтобы его можно было использовать двумя способами: как сценарий или как библиотеку.\n\
# Напомню, что в каждом модуле Python доступна встроенная переменная __name__, в которую интерпретатор Python записывает значение\n\
# __main__, только если файл выполняется как программа, а не импортируется в качестве библиотеки.\n\
# Благодаря этому функция more в этом файле автоматически выполняется в последней строке файла, когда\n\
# сценарий запускается, как самостоятельная программа, а не импортируется в какое-либо другое место. Этот простой прием является ключом\n\
# к созданию многократно используемых сценариев: благодаря реализации логики программы в виде функции, а не в виде программного кода\n\
# верхнего уровня, ее можно импортировать и повторно использоватьв других сценариях.\n\
# В результате появляется возможность запускать more.py отдельно или импортировать его и вызывать функцию more из любого другого места.\n\
# При запуске файла как самостоятельной программы мы передаем ей в командной строке имя файла, который нужно прочесть и выводить\n\
# постранично: в следующей главе будет полностью описано, как слова, вводимые в команде для запуска программы, появляются во встроен-\n\
# ном списке sys.argv. Ниже приводится пример запуска файла сценария для постраничного вывода самого себя (эта команда должна выпол-\n\
# няться в каталоге PP4E System, иначе входной файл не будет найден; причина этого будет пояснена позднее', 10)

# print(result)

more(sys.__doc__)
